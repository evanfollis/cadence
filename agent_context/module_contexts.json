{
  "tools/collect_code.py": {
    "purpose": "Collects, filters, and serializes code and documentation from the Cadence codebase into a unified format (JSON or similar). Enables downstream agents, planners, or tools to access up-to-date, structured representations of the codebase for analysis, context injection, or system introspection. Central to maintaining an accurate global code snapshot for orchestration and LLM prompting.",
    "public_api": [
      "tools.collect_code.collect",
      "tools.collect_code.main",
      "tools.collect_code.parse_args"
    ],
    "depends_on": [
      "argparse",
      "json",
      "pathlib",
      "sys"
    ],
    "used_by": [],
    "direct_imports": [
      "__future__",
      "argparse",
      "json",
      "pathlib",
      "sys"
    ],
    "related_schemas": [
      "CodePayload: {\"<relative/path>\": \"<utf-8 file contents>\"}"
    ],
    "context_window_expected": "Very large \u2013 output may exceed 100k tokens for full repo snapshots.",
    "escalation_review": "None \u2013 utility script; no sensitive logic. Monitor memory usage on enormous repos.",
    "filepath": "tools/collect_code.py"
  },
  "tools/gen_prompt.py": {
    "purpose": "Generates rich, contextually appropriate prompts for LLM or agent tasks by assembling relevant code, documentation, and context. It supports selective inclusion/exclusion of source files, size-based filtering, and automatic Markdown / code fencing so that downstream agents receive a single, copy-pastable prompt block. A small CLI wrapper makes it easy to invoke from shell scripts, CI pipelines, or higher-level orchestrators. Typical use-cases include: (1) creating a snapshot for an expert-review agent, (2) feeding an execution agent the entire codebase plus an explicit NEXT TASK header, or (3) archiving project state for later replay or fine-tuning.",
    "public_api": [
      "tools.gen_prompt._collect_files",
      "tools.gen_prompt._build_prompt",
      "tools.gen_prompt._parse_args",
      "tools.gen_prompt.main"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "__future__",
      "argparse",
      "pathlib",
      "sys",
      "textwrap"
    ],
    "related_schemas": [],
    "context_window_expected": "Potentially very large (docs + full source snapshot); downstream consumers should be prepared for 50-100k+ tokens.",
    "escalation_review": "",
    "filepath": "tools/gen_prompt.py"
  },
  "tools/module_contexts.py": {
    "purpose": "Extracts, maintains, and synchronizes structured metadata (\u201ccontext\u201d) for every module in the codebase, including public API, dependencies, and purpose. Provides the canonical source for module-level documentation and graph relationships, facilitating dependency analysis, agent task planning, and robust context slicing. Ensures context is current and consistent across JSON and other representations.",
    "public_api": [
      "tools.module_contexts.extract_and_strip_shebang_and_futures",
      "tools.module_contexts.find_existing_context",
      "tools.module_contexts.get_module_import_path",
      "tools.module_contexts.load_all_contexts",
      "tools.module_contexts.parse_module",
      "tools.module_contexts.print_context",
      "tools.module_contexts.relpath",
      "tools.module_contexts.render_context_block",
      "tools.module_contexts.render_pretty_list",
      "tools.module_contexts.scan_all_internal_modules",
      "tools.module_contexts.scan_python_modules",
      "tools.module_contexts.strip_duplicate_headers_at_top",
      "tools.module_contexts.sync_contexts",
      "tools.module_contexts.write_all_contexts"
    ],
    "depends_on": [],
    "used_by": [
      "tools.collect_code",
      "tools.gen_prompt"
    ],
    "direct_imports": [
      "ast",
      "json",
      "os",
      "re",
      "sys"
    ],
    "related_schemas": [
      "module_contexts.json"
    ],
    "context_window_expected": "Medium \u2013 function-level inspection to full-file parsing (typically <2k LOC).",
    "escalation_review": "None",
    "filepath": "tools/module_contexts.py"
  },
  "cadence/__init__.py": {
    "purpose": "Declares the Cadence root package for Python module discovery. Contains no implementation but is necessary for package structure and internal import resolution.",
    "public_api": [],
    "depends_on": [],
    "used_by": [
      "cadence/dev/command_center.py",
      "cadence/agents/base.py",
      "examples/test_001/mvp_loop.py"
    ],
    "direct_imports": [],
    "related_schemas": [],
    "context_window_expected": "Tiny (<5 lines); only package declaration.",
    "escalation_review": "None \u2013 purely structural, no executable logic.",
    "filepath": "cadence/__init__.py"
  },
  "cadence/dev/record.py": {
    "purpose": "Implements persistent, immutable task and state recording for all development workflow phases. Tracks the complete lifecycle of each task (creation, assignment, iterations, review outcomes, and archival), ensuring auditability and full historical replay. Guarantees that every action, override, or failure is logged for compliance and analytics.",
    "public_api": [
      "cadence.dev.record.TaskRecord",
      "cadence.dev.record.TaskRecordError"
    ],
    "depends_on": [],
    "used_by": [
      "cadence.dev.orchestrator"
    ],
    "direct_imports": [
      "copy",
      "datetime",
      "json",
      "os",
      "threading",
      "typing"
    ],
    "related_schemas": [],
    "context_window_expected": "\u2248120 source lines; safe to provide in full within a 4-8 k token prompt.",
    "escalation_review": "Modifying persistence logic or on-disk format requires compliance/audit review to avoid breaking historical replay guarantees.",
    "filepath": "cadence/dev/record.py"
  },
  "cadence/dev/shell.py": {
    "purpose": "Provides a safe abstraction for executing shell commands, running local tests, and managing file operations within the orchestrated workflow. Encapsulates error handling and isolation of subprocesses, allowing higher-level roles (e.g., test runners, commit hooks) to interact with the environment in a controlled and auditable manner.",
    "public_api": [
      "cadence.dev.shell.ShellCommandError",
      "cadence.dev.shell.ShellRunner"
    ],
    "depends_on": [],
    "used_by": [
      "cadence.dev.orchestrator",
      "examples.test_001.mvp_loop"
    ],
    "direct_imports": [
      "os",
      "subprocess",
      "tempfile",
      "typing"
    ],
    "related_schemas": [],
    "context_window_expected": "\u2248250 tokens (short, self-contained utility module)",
    "escalation_review": "",
    "filepath": "cadence/dev/shell.py"
  },
  "cadence/dev/executor.py": {
    "purpose": "Core implementation of the \u201cTaskExecutor\u201d role: receives a precise task description and produces a proposed code change as a unified diff (patch). Encapsulates patch construction, validation, and integration, acting as the \u201cimplementation\u201d phase of the agentic loop. Ensures no code is modified directly\u2014only via auditable diffs.",
    "public_api": [
      "cadence.dev.executor.PatchBuildError",
      "cadence.dev.executor.TaskExecutor"
    ],
    "depends_on": [],
    "used_by": [
      "cadence.dev.orchestrator",
      "examples.test_001.mvp_loop"
    ],
    "direct_imports": [
      "difflib",
      "os",
      "tempfile",
      "typing"
    ],
    "related_schemas": [
      "task.json (must contain `diff` with `file`, `before`, `after`)",
      "unified_diff (GNU patch-compatible format)"
    ],
    "context_window_expected": "~150 lines (moderate)",
    "escalation_review": "Required for any change that alters patch formatting logic or validation heuristics, because downstream components (ShellRunner, Reviewer, Orchestrator) rely on strict diff semantics.",
    "filepath": "cadence/dev/executor.py"
  },
  "cadence/dev/command_center.py": {
    "purpose": "Aggregates interactive interfaces (CLI, UI, dashboards) for monitoring, guiding, or directly managing the development loop. Orchestrates real-time views of agent activity, backlog, and state, acting as a bridge between human oversight and autonomous agent execution.",
    "public_api": [
      "cadence.dev.command_center.CONFIG",
      "cadence.dev.command_center.orch"
    ],
    "depends_on": [
      "cadence.dev.orchestrator"
    ],
    "used_by": [],
    "direct_imports": [
      "streamlit",
      "cadence.dev.orchestrator",
      "pandas"
    ],
    "related_schemas": [],
    "context_window_expected": "small",
    "escalation_review": "",
    "filepath": "cadence/dev/command_center.py"
  },
  "cadence/dev/orchestrator.py": {
    "purpose": "Implements the top-level DevOrchestrator \u2013 the single source of truth for sequencing every phase of the Cadence development loop (backlog \u2192 generation \u2192 patch execution \u2192 review \u2192 test \u2192 commit \u2192 archival). Exposes both programmatic and CLI entry-points so humans or agents can drive the end-to-end workflow. Persists all intermediate artefacts (patches, reviews, test results, git SHAs) through TaskRecord for full auditability.",
    "public_api": [
      "cadence.dev.orchestrator.DevOrchestrator"
    ],
    "depends_on": [
      "cadence.dev.backlog.BacklogManager",
      "cadence.dev.generator.TaskGenerator",
      "cadence.dev.executor.TaskExecutor",
      "cadence.dev.executor.PatchBuildError",
      "cadence.dev.reviewer.TaskReviewer",
      "cadence.dev.shell.ShellRunner",
      "cadence.dev.shell.ShellCommandError",
      "cadence.dev.record.TaskRecord",
      "cadence.dev.record.TaskRecordError"
    ],
    "used_by": [
      "cadence.dev.command_center"
    ],
    "direct_imports": [
      "argparse",
      "sys",
      "tabulate",
      ".backlog",
      ".generator",
      ".executor",
      ".reviewer",
      ".shell",
      ".record"
    ],
    "related_schemas": [
      "backlog_file_schema",
      "task_record_schema",
      "config_schema"
    ],
    "context_window_expected": "\u2248180-220 LOC (medium)",
    "escalation_review": "None \u2013 orchestrator logic is straightforward, but security/guardrail audit recommended before production use.",
    "filepath": "cadence/dev/orchestrator.py"
  },
  "cadence/dev/reviewer.py": {
    "purpose": "Implements the \u201cTaskReviewer\u201d role: given a code diff, performs automated or agent-based review for correctness, completeness, style, and policy adherence. Issues pass/fail outcomes and review rationale, blocking or allowing downstream commit/merge actions. Central for maintaining code quality and enforcing multi-agent approval. Provides a pluggable ruleset architecture (built-ins + external JSON) so future LLM/human or policy engines can extend the review surface without touching core logic.",
    "public_api": [
      "cadence.dev.reviewer.PatchReviewError",
      "cadence.dev.reviewer.TaskReviewer"
    ],
    "depends_on": [],
    "used_by": [
      "cadence.dev.orchestrator"
    ],
    "direct_imports": [
      "json",
      "os",
      "typing"
    ],
    "related_schemas": [
      "External ruleset JSON (list[dict{type:str, pattern:str, message?:str}])"
    ],
    "context_window_expected": "Small (<250 LOC) \u2011 entire file plus ruleset easily fits typical LLM context.",
    "escalation_review": "Acts as a quality/security gatekeeper; modifications require senior review.",
    "filepath": "cadence/dev/reviewer.py"
  },
  "cadence/dev/__init__.py": {
    "purpose": "Declares the Cadence dev subpackage for structured module resolution. Contains no runtime implementation but is required so that `import cadence.dev.*` works correctly across the code-base. Although empty, it implicitly enables every module inside `cadence/dev/` (e.g., BacklogManager, TaskExecutor, DevOrchestrator) to be imported as part of the Cadence package hierarchy.",
    "public_api": [],
    "depends_on": [],
    "used_by": [
      "cadence.dev.backlog",
      "cadence.dev.command_center",
      "cadence.dev.executor",
      "cadence.dev.generator",
      "cadence.dev.orchestrator",
      "cadence.dev.record",
      "cadence.dev.reviewer",
      "cadence.dev.shell",
      "examples.test_001.mvp_loop"
    ],
    "direct_imports": [],
    "related_schemas": [],
    "context_window_expected": "\u226410 lines (file is intentionally empty).",
    "escalation_review": "None\u2014trivial placeholder for package initialization.",
    "filepath": "cadence/dev/__init__.py"
  },
  "cadence/dev/generator.py": {
    "purpose": "Implements the \u201cTaskGenerator\u201d role: proposes, structures, and validates new micro-tasks (from LLMs, rules, or human suggestions). Guarantees that every task entering the backlog is well-formed, actionable, and fully specified, maximizing clarity and minimizing ambiguity for execution agents. Also supports template-driven generation and CLI-style ad-hoc creation for demos or manual workflows.",
    "public_api": [
      "cadence.dev.generator.TaskGenerator",
      "cadence.dev.generator.TaskGenerator.__init__",
      "cadence.dev.generator.TaskGenerator.generate_tasks",
      "cadence.dev.generator.TaskGenerator.overwrite_tasks",
      "cadence.dev.generator.TaskTemplateError",
      "cadence.dev.generator.REQUIRED_FIELDS"
    ],
    "depends_on": [],
    "used_by": [
      "cadence.dev.orchestrator"
    ],
    "direct_imports": [
      "datetime",
      "json",
      "os",
      "typing",
      "uuid"
    ],
    "related_schemas": [
      "cadence.dev.backlog.Task"
    ],
    "context_window_expected": "\u2248200-250 source lines",
    "escalation_review": "",
    "filepath": "cadence/dev/generator.py"
  },
  "cadence/dev/backlog.py": {
    "purpose": "Implements the \u201cBacklogManager\u201d role: maintains the prioritized queue of micro-tasks, stories, and epics for development. Provides CRUD operations, status transitions, archival, and JSON persistence. Guarantees that every task object respects a minimal schema and that all state-changes are safely written to disk for downstream agents, UIs, and analytics. Serves as the single source of truth for work-in-progress within the Cadence development loop.",
    "public_api": [
      "cadence.dev.backlog.BacklogEmptyError",
      "cadence.dev.backlog.BacklogManager",
      "cadence.dev.backlog.TaskNotFoundError",
      "cadence.dev.backlog.TaskStructureError"
    ],
    "depends_on": [],
    "used_by": [
      "cadence.dev.orchestrator"
    ],
    "direct_imports": [
      "copy",
      "datetime",
      "json",
      "os",
      "tabulate",
      "typing",
      "uuid"
    ],
    "related_schemas": [
      {
        "BacklogTask": {
          "id": "str (UUID4, auto-generated if absent)",
          "title": "str (human-readable summary)",
          "type": "str (one of \"micro\", \"story\", \"epic\"; default \"micro\")",
          "status": "str (one of \"open\", \"in_progress\", \"done\", \"archived\"; default \"open\")",
          "created_at": "str (UTC ISO-8601; auto-generated if absent)",
          "...": "additional arbitrary fields permitted"
        }
      }
    ],
    "context_window_expected": "\u2248120 LOC \u2013 comfortably fits within standard 8-16 k token LLM windows.",
    "escalation_review": "None \u2013 module is self-contained and side-effect-limited (file IO only).",
    "filepath": "cadence/dev/backlog.py"
  },
  "cadence/agents/base.py": {
    "purpose": "Core superclass that now consumes an AgentProfile instead of raw model strings. Handles messaging stack, LLM calls, context gathering, and persistence. No subclass should hard-code models any more.",
    "public_api": [
      "cadence.agents.base.BaseAgent"
    ],
    "depends_on": [
      "cadence.agents.profile",
      "cadence.llm.client",
      "cadence.context.provider"
    ],
    "used_by": [
      "cadence.agents.reasoning",
      "cadence.agents.execution",
      "cadence.agents.efficiency"
    ],
    "direct_imports": [
      "typing",
      "pathlib",
      "cadence.llm.client",
      "cadence.context.provider",
      "cadence.agents.profile"
    ],
    "context_window_expected": "\u2248100 LOC",
    "filepath": "cadence/agents/base.py"
  },
  "cadence/agents/efficiency.py": {
    "purpose": "Final EfficiencyAgent using EFFICIENCY_PROFILE; low-cost linting & summarisation.",
    "public_api": [
      "cadence.agents.efficiency.EfficiencyAgent"
    ],
    "depends_on": [
      "cadence.agents.base",
      "cadence.agents.profile"
    ],
    "filepath": "cadence/agents/efficiency.py"
  },
  "cadence/agents/reasoning.py": {
    "purpose": "Final ReasoningAgent using REASONING_PROFILE; injects code/doc snapshot on reset.",
    "public_api": [
      "cadence.agents.reasoning.ReasoningAgent"
    ],
    "depends_on": [
      "cadence.agents.base",
      "cadence.agents.profile"
    ],
    "direct_imports": [
      "cadence.agents.base",
      "cadence.agents.profile"
    ],
    "filepath": "cadence/agents/reasoning.py"
  },
  "cadence/agents/__init__.py": {
    "purpose": "Declares the Cadence agents subpackage for structured module resolution. Contains no implementation but is required so that all sub-modules (base, execution, efficiency, reasoning, registry) can be imported with the fully-qualified \"cadence.agents.*\" path.",
    "public_api": [],
    "depends_on": [],
    "used_by": [
      "cadence.agents.base",
      "cadence.agents.efficiency",
      "cadence.agents.execution",
      "cadence.agents.reasoning",
      "cadence.agents.registry"
    ],
    "direct_imports": [],
    "related_schemas": [],
    "context_window_expected": "negligible (file is empty)",
    "escalation_review": "none\u2014simple package marker",
    "filepath": "cadence/agents/__init__.py"
  },
  "cadence/agents/registry.py": {
    "purpose": "Central registry now exposes both Core Agents and AgentProfiles for external callers.",
    "public_api": [
      "cadence.agents.registry.get_agent",
      "cadence.agents.registry.get_profile"
    ],
    "depends_on": [
      "cadence.agents.reasoning",
      "cadence.agents.execution",
      "cadence.agents.efficiency",
      "cadence.agents.profile"
    ],
    "filepath": "cadence/agents/registry.py"
  },
  "cadence/agents/execution.py": {
    "purpose": "Final ExecutionAgent using EXECUTION_PROFILE; dedicated to code generation/refactor tasks.",
    "public_api": [
      "cadence.agents.execution.ExecutionAgent"
    ],
    "depends_on": [
      "cadence.agents.base",
      "cadence.agents.profile"
    ],
    "filepath": "cadence/agents/execution.py"
  },
  "cadence/llm/client.py": {
    "purpose": "Abstracts and manages all LLM client connections, credentials, and request handling for Cadence agents. Provides unified access to various model endpoints, context window management, and API configuration, allowing agents to query or delegate to LLMs without bespoke integration code.",
    "public_api": [
      "cadence.llm.client.LLMClient",
      "cadence.llm.client.get_default_client",
      "cadence.llm.client.get_env"
    ],
    "depends_on": [],
    "used_by": [
      "cadence.agents.base"
    ],
    "direct_imports": [
      "asyncio",
      "dotenv",
      "logging",
      "openai",
      "os",
      "typing"
    ],
    "related_schemas": [],
    "context_window_expected": "Dependent on selected OpenAI model (defaults to ~8K tokens for GPT-4-class models). Callers should chunk/summarize if larger context is required.",
    "escalation_review": "",
    "filepath": "cadence/llm/client.py"
  },
  "cadence/llm/__init__.py": {
    "purpose": "Declares the Cadence LLM subpackage for structured module resolution. Contains no implementation but ensures correct imports for LLM client components. Serves as the namespace anchor for any sub-modules under `cadence.llm` so that external code can reliably import `cadence.llm.*` symbols.",
    "public_api": [],
    "depends_on": [],
    "used_by": [
      "cadence.llm.client",
      "cadence.agents.base"
    ],
    "direct_imports": [],
    "related_schemas": [],
    "context_window_expected": "\u22645 LOC (trivial stub)",
    "escalation_review": "None \u2013 inert stub file",
    "filepath": "cadence/llm/__init__.py"
  },
  "cadence/agents/profile.py": {
    "purpose": "Introduces immutable AgentProfile dataclass holding model, context-limit, review policy, etc. Decouples runtime behaviour from static configuration and is the canonical source for profile data used by Core Agents and governance utilities.",
    "public_api": [
      "cadence.agents.profile.AgentProfile",
      "cadence.agents.profile.REASONING_PROFILE",
      "cadence.agents.profile.EXECUTION_PROFILE",
      "cadence.agents.profile.EFFICIENCY_PROFILE",
      "cadence.agents.profile.BUILTIN_PROFILES"
    ],
    "depends_on": [],
    "used_by": [
      "cadence.agents.base",
      "cadence.agents.reasoning",
      "cadence.agents.execution",
      "cadence.agents.efficiency",
      "cadence.agents.sidekick",
      "cadence.agents.registry"
    ],
    "direct_imports": [
      "dataclasses",
      "typing"
    ],
    "context_window_expected": "trivial (<40 LOC)",
    "filepath": "cadence/agents/profile.py"
  },
  "cadence/agents/sidekick.py": {
    "purpose": "Persona wrapper that delegates to ReasoningAgent rather than subclassing it, maintaining separation between capability and persona.",
    "public_api": [
      "cadence.agents.sidekick.Sidekick"
    ],
    "depends_on": [
      "cadence.agents.reasoning",
      "cadence.agents.profile"
    ],
    "filepath": "cadence/agents/sidekick.py"
  }
}