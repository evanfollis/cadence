{
  "docs/next_steps.md": "Below is a **self-contained blueprint** for the backend-hardening sprint.\nIt captures *every* loop I proposed, the order of operations, and the artifacts each step must leave behind (code, tests, docs). You should be able to hand one loop at a time to Cadence itself (or work through manually) without me in the room.\n\n---\n\n## 1 · Guiding constraints\n\n| Principle                                               | Implementation Guards                                           |\n| ------------------------------------------------------- | --------------------------------------------------------------- |\n| **Single Orchestrator** now; multi-process safety later | File-level mutex wraps backlog & record writes in Loop 1        |\n| **ChangeSet = sole patch format**                       | Legacy `diff`/`patch` paths removed Loop 4                      |\n| **Fail-closed** whenever JSON validation breaks         | Efficiency review strict-fail added Loop 5                      |\n| **Docs ↔ Code ↔ Tests never drift**                     | Every loop patches dev docs + linter; new tests prove behaviour |\n\n---\n\n## 2 · Road-map table\n\n| Loop  | Headline Deliverable                                                            | Key Modules Touched                                        | New Tests                        |\n| ----- | ------------------------------------------------------------------------------- | ---------------------------------------------------------- | -------------------------------- |\n| **0** | *Prep sweep* – delete Streamlit imports, archive legacy UI                      | `command_center.py` only (move to `legacy/`)               | n/a                              |\n| **1** | `FileMutex` cross-process lock + integration                                    | `dev/locking.py`, `backlog.py`, `record.py`, `audit/*`     | `test_file_mutex.py`             |\n| **2** | *Atomic rollback inside ShellRunner* + `dirty_repo` sentinel                    | `shell.py`, `orchestrator.py`                              | `test_failed_rollback.py` update |\n| **3** | `PhaseTrackerMixin`; decorator on **all** ShellRunner mutators                  | `phase_guard.py`, `shell.py`                               | `test_phase_ordering.py`         |\n| **4** | Deprecate `task[\"diff\"]` & `task[\"patch\"]` ; inject `before_sha` at backlog-add | `executor.py`, `backlog.py`, delete fallback code in tests | `test_before_sha_validation.py`  |\n| **5** | Efficiency review strict-fail on JSON parse/validation error                    | `orchestrator.py` review-2 block                           | `test_efficiency_review_gate.py` |\n\n*(Loops 6+ reserved for patch-builder optimisation, snapshot caching, lint tooling.)*\n\n---\n\n## 3 · Detailed per-loop blueprint\n\n### LOOP 0 – Streamlit code quarantine\n\n* **Action**: move `src/cadence/dev/command_center.py` to `legacy/` and delete its import trail; adjust `__init__.py` exports.\n* **Docs**: add note in `docs/DEV_PROCESS.md` that React GUI is future work; Streamlit frozen.\n* **Tests**: none (pure relocation).\n\n---\n\n### LOOP 1 – Repository-wide mutex\n\n**Changes**\n\n| File                                                | Addition                                               |\n| --------------------------------------------------- | ------------------------------------------------------ |\n| `src/cadence/dev/locking.py`                        | `FileMutex` context-manager; `with FileMutex(path): …` |\n| `backlog.py`, `record.py`                           | Wrap `save/load/_persist` with mutex                   |\n| `audit/agent_event_log.py`, `audit/llm_call_log.py` | Replace optional *filelock* import with `FileMutex`    |\n\n**Docs**\n\n*DEV\\_PROCESS.md* → Persistence bullet: “Backlog and TaskRecord writes use `FileMutex` (fcntl/msvcrt) to prevent multi-process clobber.”\n\n**Tests**\n\n`tests/test_file_mutex.py`:\n\n1. Spawn two subprocesses writing distinct items to same backlog.\n2. Assert final JSON valid and contains both items.\n\n---\n\n### LOOP 2 – Guaranteed rollback\n\n**Changes**\n\n| File              | Addition                                                                                  |\n| ----------------- | ----------------------------------------------------------------------------------------- |\n| `shell.py`        | `git_apply_reverse()` internal; `rollback(patch)` public; sets `dirty_repo` flag if fails |\n| `orchestrator.py` | On any failure: `if self.shell.rollback(patch) is False: abort cycle early`               |\n\nEdge behaviour: if `dirty_repo` true, next task cycle refuses to start until user (or agent) cleans workspace.\n\n**Docs**\n\n`DEV_PROCESS.md` → new fail-path diagram: *patch\\_apply → test\\_fail → rollback →* (dirty?) logic.\n\n**Tests**\n\nUpdate existing `tests/test_failed_rollback.py`:\n\n* Simulate failing tests, ensure rollback succeeds and dirty flag is False.\n\n---\n\n### LOOP 3 – PhaseTrackerMixin\n\n**Changes**\n\n| File                         | Addition                                                                                                    |\n| ---------------------------- | ----------------------------------------------------------------------------------------------------------- |\n| `dev/phase_tracker.py` (new) | Mixin exposing `_init_phase` / `_mark_phase` / `_require_phase`                                             |\n| `shell.py`                   | Inherit mixin; decorate `git_checkout_branch`, `run_pytest`, `git_commit`, `git_apply` with `enforce_phase` |\n| `orchestrator.py`            | Remove manual flag manipulation where mixin now handles                                                     |\n\n**Docs**\n\n`DEV_PROCESS.md` → phase table gains explicit numeric IDs; mixin enforced order listed.\n\n**Tests**\n\n`tests/test_phase_ordering.py`: call ShellRunner methods out of order; expect `PhaseOrderError`.\n\n---\n\n### LOOP 4 – ChangeSet exclusive & SHA propagation\n\n**Changes**\n\n| File            | Action                                                                              |\n| --------------- | ----------------------------------------------------------------------------------- |\n| `executor.py`   | Delete legacy `_build_one_file_diff`; raise if `'change_set'` missing               |\n| `dev/schema.py` | Remove `CHANGE_SET_V1` legacy alias fields (`changes`)                              |\n| `backlog.py`    | On `add_item`, for every `change_set` edit compute current SHA and set `before_sha` |\n| Tests           | Remove fixtures that feed `diff`/`patch` tasks                                      |\n\n**Docs**\n\n*DEV\\_PROCESS.md* & *DEV\\_AGENTS.md* – “All tasks must supply `change_set` JSON; legacy formats removed.”\n\n**Tests**\n\n`tests/test_before_sha_validation.py`\n\n1. Add task touching `src/foo.py`; ensure added SHA matches file state.\n2. Mutate `foo.py` then attempt to apply stale task; expect SHA mismatch error.\n\n---\n\n### LOOP 5 – Fail-closed efficiency gate\n\n**Changes**\n\n| File              | Action                                                                                                                                                        |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `orchestrator.py` | In Efficiency review block, if `_eff_json` call raises *any* exception → `eff_pass=False`. Stub mode may be overridden by cmd-line `--force-efficiency-pass`. |\n| `schema.py`       | No change                                                                                                                                                     |\n| CLI               | Add `--force-efficiency-pass` flag for rare stub runs                                                                                                         |\n\n**Docs**\n\n*DEV\\_PROCESS.md* – “JSON validation errors during efficiency review block merge.”\n\n**Tests**\n\n`tests/test_efficiency_review_gate.py`:\n\n* Monkey-patch `_eff_json.ask` to raise; assert task cycle aborts at efficiency stage.\n\n---\n\n## 4 · Meta-work: onboarding & context reset\n\n1. **File tree map** – auto-generated by `tools/collect_code.py --root src/cadence --out docs/FILE_TREE.md`.\n2. **Quick-start.md** – step-by-step “clone → poetry install → pytest → start orchestrator” doc.\n3. **Onboarding reset script** – `scripts/fresh_context.sh` deletes `.cadence_logs`, backlog, record, and re-initialises with a single blueprint task.\n\nThese live in `docs/ONBOARDING/` so you can wipe conversation history and boot a new chat with minimal prompt.\n\n---\n\n### Ready to execute?\n\nIf this plan looks right, we can dive into **Loop 1** and I’ll supply the granular NEXT\\_ACTION / SUCCESS\\_CRITERION / ROLLBACK diff list.\n",
  "docs/NORTH_STAR.md": "# CADENCE PLATFORM — NORTH STAR (2025-06-23 refresh)\n\n## Mission\nIndustrialise **continuous, self-improving software delivery** through an auditable agent–human workflow that always keeps main green.\n\n## Ten-Month Objectives\n| ID | Objective                               | Measurable Key Result                            |\n|----|-----------------------------------------|--------------------------------------------------|\n| O1 | Branch-per-Task Isolation               | 100 % tasks on isolated branches (no commit-on-main) |\n| O2 | Reactive Command-Centre                 | Real-time UI shows backlog, live logs, merge queue |\n| O3 | Zero Silent Drift                       | Docs ↔ Code linter passes in CI 100 %            |\n| O4 | Auto Merge & Rollback                   | ≥ 95 % merges succeed first try; failed merges auto-reverted |\n| O5 | Meta-Agent Governance                   | Weekly analytics with policy drift ≤ 5 %         |\n\n*This document is treated as a **canonical contract**. Any field referenced inside tables is validated by `tools/lint_docs.py`.*",
  "docs/DEV_PROCESS.md": "# CADENCE DEVELOPMENT PROCESS (v2 — 2025-06-23)\n\n## Phase Table — **MUST NOT DRIFT**  \n\n| Seq | Phase            | Responsible Class / Service         | Fail Criterion                       |\n|-----|------------------|--------------------------------------|--------------------------------------|\n| 01  | Backlog          | BacklogManager                       | Empty backlog                        |\n| 02  | Generate         | TaskGenerator                        | Malformed task                       |\n| 03  | Execute          | TaskExecutor                         | Patch invalid                        |\n| 04  | Review-Reasoning | TaskReviewer                         | Review rejects diff                  |\n| 04-b| Failure-Diagnose | FailureResponder                     | parent status not set / throws       |\n| 05  | Review-Efficiency| `EfficiencyAgent` (LLM)              | Lint or metric failure               |\n| 06  | Branch-Isolate   | ShellRunner.git_checkout_branch      | Branch creation fails                |\n| 07  | Test (pre-merge) | ShellRunner.run_pytest               | Tests fail                           |\n| 08  | Commit           | ShellRunner.git_commit               | Phase guard missing flags            |\n| 09  | Merge Queue      | MergeCoordinator (new)               | Conflicts or post-merge test fail    |\n| 10  | Record           | TaskRecord                           | State not persisted                  |\n| 11  | Meta             | MetaAgent                            | Drift > policy threshold             |\n\n*Phase sequencing validated at runtime by `phase_guard.enforce_phase()` and at doc-time by `tools/lint_docs.py`.*\n\n## Guard Rails\n* Commit blocked unless phases 01-07 succeed **and** flags `review_passed`, `efficiency_passed`, `branch_isolated`, `tests_passed` are present.\n* Merge blocked unless branch fast-forwards and post-merge tests pass.\n",
  "docs/CHANGELOG.md": "# CHANGELOG\n\n## 2025-06-23\n* Doc-refresh to align phase table, agent profiles, and North-Star OKRs.\n* Deprecated scripts/auto_generate_patches.py — replaced by tools/plan_blueprint_tasks.py.\n* Added planned work-packages WP-1 … WP-8 to backlog (branch isolation, merge coordinator, React UI, etc.).",
  "docs/architecture.mermaid": "flowchart TD\n  subgraph Orchestrator\n      ORCH[DevOrchestrator]\n  end\n  subgraph Roles\n      BACK[BacklogManager]\n      GEN[TaskGenerator]\n      EXEC[TaskExecutor]\n      REV[TaskReviewer]\n      EFF[EfficiencyAgent]\n      BRN[ShellRunner<br/>Branch-Isolate]\n      TEST[ShellRunner<br/>Pytest]\n      MERG[MergeCoordinator]\n      REC[TaskRecord]\n      META[MetaAgent]\n  end\n\n  ORCH --> BACK & GEN & EXEC & REV & EFF & BRN & TEST & REC & META\n  EXEC --> REV & EFF\n  BRN --> TEST --> MERG\n  MERG --> REC\n  META --> ORCH",
  "docs/DEV_AGENTS.md": "# DEV AGENTS (canonical, auto-linted)\n\n| Profile | Model          | Context Limit | Primary Duties                |\n|---------|----------------|---------------|-------------------------------|\n| reasoning   | `o3-2025-04-16` | 200 k tok   | Plan, architecture review     |\n| execution   | `gpt-4.1`       |   1 M tok   | Generate / refactor code      |\n| efficiency  | `o4-mini`       | 200 k tok   | Lint & summarise – MUST return EfficiencyReview JSON |\n\nAll Core Agents (`ReasoningAgent`, `ExecutionAgent`, `EfficiencyAgent`) are *final*.  New personas must **delegate** and declare their own `AgentProfile`.\n\nLint rule: profile table rows **must equal** `cadence.agents.profile.BUILTIN_PROFILES.keys()`."
}