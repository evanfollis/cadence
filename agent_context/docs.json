{
  "docs/DEV_PROCESS.md": "\n# CADENCE DEVELOPMENT PROCESS\n\n*Last‑updated: 2025‑06‑20*\n\n## 1 · Overview\n\nOne canonical document defines *what* must happen and *in what order*. All other docs reference this file to avoid drift.\n\n## 2 · Core Workflow Phases\n\n| Phase        | Role (Class)     | Critical Interfaces                           | Fail Criterion                 |\n| ------------ | ---------------- | --------------------------------------------- | ------------------------------ |\n| **Backlog**  | `BacklogManager` | `list_items`, `add_item`, `archive_completed` | Empty backlog blocks pipeline. |\n| **Generate** | `TaskGenerator`  | `generate_tasks`, `overwrite_tasks`           | Ill‑formed tasks.              |\n| **Execute**  | `TaskExecutor`   | `build_patch`, `refine_patch`                 | Patch invalid or cannot apply. |\n| **Test**     | `ShellRunner`    | `run_pytest`, `git_apply`                     | Test suite fails.              |\n| **Review**   | `TaskReviewer`   | `review_patch`                                | Review rejects diff.           |\n| **Commit**   | `ShellRunner`    | `git_commit`                                  | Commit fails or skipped.       |\n| **Record**   | `TaskRecord`     | `save`, `append_iteration`                    | State not persisted.           |\n| **Meta**     | `MetaAgent`      | `analyse`, `alert`                            | Drift > policy threshold.      |\n\n*Sequence is strict; no phase may be skipped or merged.*\n\n## 3 · Guard Rails\n\n* Tests **and** review must pass before commit.\n* Overrides require explicit rationale and are logged.\n* All artefacts (tasks, diffs, logs) are immutable once archived.\n\n## 4 · Failure Criteria\n\n* Roles perform multiple responsibilities.\n* Orchestration happens outside `DevOrchestrator`.\n* Silent state transitions or missing logs.\n* Context injection exceeds model window constraints (see DEV\\_AGENTS).\n\n## 5 · Reference Architecture Diagram\n\nSee `docs/architecture.mmd` for the system flow.\n\n---\n\n*Change‑log:* 2025‑06‑20 — merged DEV\\_WORKFLOW & DEV\\_PROCESS; added strict phase table.\n",
  "docs/DEV_AGENTS.md": "\n# DEV AGENTS — Model Assignment, Profiles & Context Rules  \n\n*Last-updated: 2025-06-20*\n\n## 1 · Why This File Exists  \nThis is the **single source of truth** for how Cadence maps logical roles to concrete LLM\nmodels, context windows, review policy and—new in this revision—`AgentProfile`\nobjects that keep those concerns *out of the Python class hierarchy*.\n\n## 2 · Key Concepts  \n\n| Term            | Description                                                                    |\n| --------------- | ------------------------------------------------------------------------------ |\n| **AgentProfile**| Immutable dataclass declaring model, context limit, review policy, etc.        |\n| **Core Agent**  | Final class that *implements* a capability (Reasoning / Execution / Efficiency)|\n| **Persona**     | Thin wrapper that *delegates* to a Core Agent but presents a different prompt. |\n| **Capability**  | A mix-in or helper that adds specific behaviour (e.g. `CodeContextCapability`).|\n\nSeparation of concerns:  \n\n```\n+------------------+     +--------------+     +----------+\n|  Persona (Sidekick)----> Core Agent ----->  AgentProfile\n+------------------+     +--------------+     +----------+\n                   delegates            references\n```\n\n## 3 · Profiles (Canonical)\n\n| Profile Name | Role Tag          | Model          | Context Limit | Review Path                                   |\n| ------------ | ----------------- | -------------- | ------------- | --------------------------------------------- |\n| `REASONING`  | `plan-review`     | `o3-2025-04-16`| 200 K         | Cannot commit code; must review Execution diff|\n| `EXECUTION`  | `implement`       | `gpt-4.1`      | 1 M           | Needs review by Reasoning or Efficiency       |\n| `EFFICIENCY` | `lint-summarise`  | `o4-mini`      | 200 K         | Reviews Execution unless diff is non-code     |\n\nAll profiles live in `cadence/agents/profile.py`.\n\n## 4 · Core Agents (final)\n\n| Class Name                | Uses Profile | Responsibilities                              |\n| ------------------------- | ------------ | --------------------------------------------- |\n| `ReasoningAgent`          | `REASONING`  | Planning, architecture review, policy checks  |\n| `ExecutionAgent`          | `EXECUTION`  | Code generation / refactor                    |\n| `EfficiencyAgent`         | `EFFICIENCY` | Linting, summarisation, static analysis       |\n\nThese classes are **final**—do not subclass for personas.\n\n## 5 · Personas\n\nA persona combines a *profile* + *prompt* + optional extra helpers by **delegating**\nto one of the Core Agents. Example: `Sidekick` (advisor persona) delegates to\n`ReasoningAgent` but overrides only the system prompt.\n\n## 6 · Context Injection Rules (unchanged)\n\n1. ExecutionAgent may receive full codebase when ≤ 1 M tokens; otherwise chunk.  \n2. Reasoning/Efficiency agents limited to ≤ 200 K tokens per call.  \n3. Module summaries (`# MODULE CONTEXT SUMMARY`) are mandatory for every file.  \n\n## 7 · Governance (unchanged)\n\n* All agent calls log: timestamp, model, prompt token count, hash of output.\n* CI step `lint_docs.py` verifies correct model names and context annotations.\n\n---\n\n*Change-log:*  \n2025-06-20 — Introduced AgentProfile pattern; Core Agents made final; personas use delegation.",
  "docs/NORTH_STAR.md": "\n# CADENCE PLATFORM — NORTH STAR BLUEPRINT\n\n*Last‑updated: 2025‑06‑20 (UTC‑05:00)*\n\n## 1 · Mission\n\n> **Industrialise high‑quality software delivery through an auditable, agent‑human workflow that enables continuous, self‑improving execution across diverse projects—at maximum reliability and minimal risk.**\n\n## 2 · End‑State Vision\n\n| Axis                          | Description                                                                                 |\n| ----------------------------- | ------------------------------------------------------------------------------------------- |\n| **Unified Orchestrator**      | One controller owns coordination; roles are hot‑swappable (human ⇄ agent) without refactor. |\n| **Immutable Auditability**    | Tamper‑proof logs of every state‑transition and decision.                                   |\n| **Continuous Meta‑Learning**  | Meta‑agent detects bottlenecks and policy drift in real time.                               |\n| **Universal Applicability**   | Same pipeline covers ML, infra, analytics, etc.—no bespoke flows.                           |\n| **Transparent Collaboration** | All rationale, context, and hand‑offs observable by any stakeholder.                        |\n\n## 3 · Objectives & Key Results (12‑month)\n\n| Objective                   | Key Results                                                   |\n| --------------------------- | ------------------------------------------------------------- |\n| **O1 · Launch MVP**         | KR1 — autonomous red→green run in *safe\\_inmemory* mode.      |\n| **O2 · Scale Velocity**     | KR2 — median task cycle ≤ 1 day; ≥ 5 tasks/week/dev.          |\n| **O3 · Assure Reliability** | KR3 — 0 regressions post‑commit (tests gate merges).          |\n| **O4 · Expand Autonomy**    | KR4 — ≥ 3 workflow phases fully autonomous, overrides ≤ 10 %. |\n| **O5 · Meta‑optimise**      | KR5 — monthly analytics on bottlenecks & rollback rate.       |\n\n## 4 · Guiding Principles\n\n1. **Explicit Contracts** — single‑responsibility roles with strict I/O.\n2. **Audit by Default** — every action is logged, nothing silent.\n3. **Fail‑Fast Feedback** — surface errors immediately; automate retries where safe.\n4. **No Hidden State** — all state serialised and reconstructable.\n5. **Human‑First Overrides** — allowed, but always logged and reviewed.\n\n## 5 · Glossary\n\n| Term           | Definition                                              |\n| -------------- | ------------------------------------------------------- |\n| **Task**       | Serializable JSON describing work, history, and status. |\n| **Patch**      | Unified diff representing proposed code change.         |\n| **Agent Slot** | Named interface that may be filled by human or agent.   |\n| **MetaAgent**  | Oversight component that analyses workflow telemetry.   |\n\n---\n\n*Change‑log:* 2025‑06‑20 — consolidated vision; removed marketing prose.",
  "docs/architecture.mermaid": "\nflowchart TD\nsubgraph Orchestrator\nORCH\\[DevOrchestrator]\nend\n\n```\nsubgraph Roles\n    BACK[BacklogManager]\n    GEN[TaskGenerator]\n    EXEC[TaskExecutor]\n    SHELL[ShellRunner]\n    REV[TaskReviewer]\n    RECORD[TaskRecord]\n    META[MetaAgent]\nend\n\nORCH --> BACK\nORCH --> GEN\nORCH --> EXEC\nORCH --> SHELL\nORCH --> REV\nORCH --> RECORD\nORCH --> META\n\nEXEC --> SHELL\nSHELL --> REV\nREV --> ORCH\n\nSHELL --> RECORD\nREV --> RECORD\nMETA --> ORCH\nMETA --> RECORD\n```\n\n%% End of architecture.mmd\n"
}