[
  {
    "id": "bp-fr-01-blocked-status",
    "title": "Failure-Responder (Phase-0) · Introduce \"blocked\" task state",
    "type": "story",
    "status": "open",
    "created_at": "2025-06-23T00:00:00Z",
    "description": "Goal: enable Cadence to pause a parent task while automatically generated sub-tasks repair the failure.\nImplementation Requirements:\n  1. BacklogManager\n     • Accept new status value \"blocked\".\n     • list_items(\"open\") MUST NOT return blocked items.\n  2. Dev docs\n     • Update docs/DEV_PROCESS.md guard-rails table so filtering rule is explicit.\n  3. Unit-tests\n     • Add tests/backlog_blocked_filtering.py that covers add → block → query cycle.\nAcceptance: all existing tests green plus new test file."
  },
  {
    "id": "bp-fr-02-failure-phase-docs",
    "title": "Failure-Responder (Phase-1) · Add \"Failure-Diagnose\" phase to docs & enums",
    "type": "story",
    "status": "open",
    "created_at": "2025-06-23T00:00:05Z",
    "description": "Goal: extend canonical Phase Table so a reasoning-agent can run immediately after any failure.\nDeliverables:\n  • Insert new row into docs/DEV_PROCESS.md:\n        04-b | Failure-Diagnose | FailureResponder | parent status not set / throws\n  • Export PHASE_FAILURE_DIAGNOSE constant in cadence.dev.phase_guard (or central enum).\n  • Adapt tools/lint_docs.py so doc ↔ enum stays in sync."
  },
  {
    "id": "bp-fr-03-failure-responder-module",
    "title": "Failure-Responder (Phase-2) · Implement src/cadence/dev/failure_responder.py",
    "type": "story",
    "status": "open",
    "created_at": "2025-06-23T00:00:10Z",
    "description": "Create a standalone FailureResponder class that:\n  1. Holds a ReasoningAgent instance.\n  2. Exposes handle_failure(…) which receives {failed_task, stage, error, diff?, test_output?}.\n  3. Builds a prompt (see design doc) and calls the agent in JSON-mode.\n  4. Parses returned JSON list → BacklogManager.add_item() for each sub-task (status=open, parent_id=<failed>). \n  5. Marks parent task.status=\"blocked\".\n  6. Depth guard: stop recursion after configurable max_depth (default=2).\nInclude stub LLM in tests so CI stays offline."
  },
  {
    "id": "bp-fr-04-orchestrator-hook",
    "title": "Failure-Responder (Phase-3) · Wire FailureResponder into DevOrchestrator rollback path",
    "type": "story",
    "status": "open",
    "created_at": "2025-06-23T00:00:15Z",
    "description": "Modify DevOrchestrator:\n  • Add self.failure_responder and flag enable_auto_failures (default False).\n  • Inside *attempt_rollback() call FailureResponder.handle_failure() when flag true.\n  • Record TaskRecord snapshots: failed*<stage>, auto_subtasks_created, parent_blocked.\n  • Update ShellRunner phase flags if necessary but DO NOT break existing happy-path."
  },
  {
    "id": "bp-fr-05-unblock-parent",
    "title": "Failure-Responder (Phase-4) · Auto-unblock parent when all children archived",
    "type": "story",
    "status": "open",
    "created_at": "2025-06-23T00:00:20Z",
    "description": "Extend BacklogManager.archive_completed() (or helper) so that when every task sharing parent_id=X is archived/done, the parent task is moved from blocked→open. Write TaskRecord snapshot parent_unblocked. Add unit-test covering blocked→unblocked flow."
  },
  {
    "id": "bp-fr-06-test-suite",
    "title": "Failure-Responder (Phase-5) · Regression tests for recursive sub-task loop",
    "type": "story",
    "status": "open",
    "created_at": "2025-06-23T00:00:25Z",
    "description": "Add tests/test_failure_responder_flow.py:\n  1. Simulate a task that fails pytest.\n  2. Stub ReasoningAgent to return two micro-subtasks.\n  3. Ensure backlog now contains +2 open tasks and parent is blocked.\n  4. Simulate sub-tasks completing → parent unblocked.\nTest must execute entirely offline."
  },
  {
    "id": "bp-fr-07-docs-and-ci",
    "title": "Failure-Responder (Phase-6) · Update docs & CI for auto-failure feature flag",
    "type": "story",
    "status": "open",
    "created_at": "2025-06-23T00:00:30Z",
    "description": "Deliverables:\n  • docs/NORTH_STAR.md section “Self-Healing Loop”.\n  • README snippet on `enable_auto_failures` flag.\n  • CI matrix job that runs pytest with flag both True & False."
  }
]