[
  {
    "id": "blueprint-1-filemutex",
    "title": "Create cross-process FileMutex helper",
    "type": "blueprint",
    "status": "open",
    "created_at": "2025-06-24T00:00:00Z",
    "description": "Implement src/cadence/dev/locking.py defining: class FileMutex: • Context-manager acquires exclusive lock on <target_path>.lock. • POSIX: fcntl.flock, Windows: msvcrt.locking, otherwise no-op stub with warning. • Exposes .path (lockfile) and .acquired boolean. Add docstring with platform notes and example usage."
  },
  {
    "id": "blueprint-2-integrate-mutex",
    "title": "Guard backlog & record JSON writes with FileMutex",
    "type": "blueprint",
    "status": "open",
    "created_at": "2025-06-24T00:00:00Z",
    "description": "Edit backlog.py and record.py: • Wrap all disk I/O (save, load, _persist) in `with FileMutex(self.path): …` in addition to existing RLock. • Remove any redundant tmp-file rename race comments. Preserve existing atomic-swap semantics."
  },
  {
    "id": "blueprint-3-audit-lock",
    "title": "Unify audit log locking via FileMutex",
    "type": "blueprint",
    "status": "open",
    "created_at": "2025-06-24T00:00:00Z",
    "description": "In src/cadence/audit/agent_event_log.py and audit/llm_call_log.py: • Delete the conditional `from filelock import FileLock` import. • Import FileMutex and use it in place of FileLock (same semantics: `with FileMutex(jsonl_path):`). • If FileMutex is stub (no lock), behaviour matches old optional dependency path."
  },
  {
    "id": "blueprint-4-docs-update",
    "title": "Document mutex in DEV_PROCESS.md",
    "type": "blueprint",
    "status": "open",
    "created_at": "2025-06-24T00:00:00Z",
    "description": "Add bullet under **Persistence** subsection in docs/DEV_PROCESS.md: “Backlog and TaskRecord writes are protected by FileMutex (fcntl/msvcrt) to prevent multi-process clobber.” Ensure phase-table linter still passes."
  },
  {
    "id": "blueprint-5-mutex-test",
    "title": "Add test_file_mutex.py",
    "type": "blueprint",
    "status": "open",
    "created_at": "2025-06-24T00:00:00Z",
    "description": "Create new test that: 1. Uses tempfile.TemporaryDirectory() as isolated repo. 2. Spawns two `python -c` subprocesses that each instantiate BacklogManager on the same JSON file and append a unique task (sleep 0.1 between writes). 3. Wait for both to finish; load JSON; assert len(list_items)==2 and file is valid. Skip on Windows if multiprocessing spawn causes flake (mark xfail)."
  }
]
