{
  "tools/collect_code.py": {
    "purpose": "Collects, filters, and serializes code and documentation from the Cadence codebase into a unified format (JSON or similar). Enables downstream agents, planners, or tools to access up-to-date, structured representations of the codebase for analysis, context injection, or system introspection. Central to maintaining an accurate global code snapshot for orchestration and LLM prompting.",
    "public_api": [
      "tools.collect_code.collect",
      "tools.collect_code.main",
      "tools.collect_code.parse_args"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "__future__",
      "argparse",
      "json",
      "pathlib",
      "sys"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "tools/collect_code.py"
  },
  "tools/gen_prompt.py": {
    "purpose": "Generates rich, contextually appropriate prompts for LLM or agent tasks by assembling relevant code, documentation, and context. Handles dynamic file collection and prompt formatting to optimize code ingestion, summarization, or targeted codebase queries. Serves as the bridge between raw code assets and actionable agent input.",
    "public_api": [
      "tools.gen_prompt._build_prompt",
      "tools.gen_prompt._collect_files",
      "tools.gen_prompt._parse_args",
      "tools.gen_prompt.main"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "__future__",
      "argparse",
      "pathlib",
      "sys",
      "textwrap"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "tools/gen_prompt.py"
  },
  "tools/module_contexts.py": {
    "purpose": "Extracts, maintains, and synchronizes structured metadata (\u201ccontext\u201d) for every module in the codebase, including public API, dependencies, and purpose. Provides the canonical source for module-level documentation and graph relationships, facilitating dependency analysis, agent task planning, and robust context slicing. Ensures context is current and consistent across JSON and other representations.",
    "public_api": [
      "tools.module_contexts.extract_and_strip_shebang_and_futures",
      "tools.module_contexts.find_existing_context",
      "tools.module_contexts.get_module_import_path",
      "tools.module_contexts.load_all_contexts",
      "tools.module_contexts.parse_module",
      "tools.module_contexts.print_context",
      "tools.module_contexts.relpath",
      "tools.module_contexts.render_context_block",
      "tools.module_contexts.render_pretty_list",
      "tools.module_contexts.scan_all_internal_modules",
      "tools.module_contexts.scan_python_modules",
      "tools.module_contexts.strip_duplicate_headers_at_top",
      "tools.module_contexts.sync_contexts",
      "tools.module_contexts.write_all_contexts"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "ast",
      "json",
      "os",
      "re",
      "sys"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "tools/module_contexts.py"
  },
  "cadence/__init__.py": {
    "purpose": "Declares the Cadence root package for Python module discovery. Contains no implementation but is necessary for package structure and internal import resolution.",
    "public_api": [],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/__init__.py"
  },
  "cadence/dev/record.py": {
    "purpose": "Implements persistent, immutable task and state recording for all development workflow phases. Tracks the complete lifecycle of each task (creation, assignment, iterations, review outcomes, and archival), ensuring auditability and full historical replay. Guarantees that every action, override, or failure is logged for compliance and analytics.",
    "public_api": [
      "cadence.dev.record.TaskRecord",
      "cadence.dev.record.TaskRecordError"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "copy",
      "datetime",
      "json",
      "os",
      "threading",
      "typing"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/dev/record.py"
  },
  "cadence/dev/shell.py": {
    "purpose": "Provides a safe abstraction for executing shell commands, running local tests, and managing file operations within the orchestrated workflow. Encapsulates error handling and isolation of subprocesses, allowing higher-level roles (e.g., test runners, commit hooks) to interact with the environment in a controlled and auditable manner.",
    "public_api": [
      "cadence.dev.shell.ShellCommandError",
      "cadence.dev.shell.ShellRunner"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "os",
      "subprocess",
      "tempfile",
      "typing"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/dev/shell.py"
  },
  "cadence/dev/executor.py": {
    "purpose": "Core implementation of the \u201cTaskExecutor\u201d role: receives a precise task description and produces a proposed code change as a unified diff (patch). Encapsulates patch construction, validation, and integration, acting as the \u201cimplementation\u201d phase of the agentic loop. Ensures no code is modified directly\u2014only via auditable diffs.",
    "public_api": [
      "cadence.dev.executor.PatchBuildError",
      "cadence.dev.executor.TaskExecutor"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "difflib",
      "os",
      "tempfile",
      "typing"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/dev/executor.py"
  },
  "cadence/dev/command_center.py": {
    "purpose": "Aggregates interactive interfaces (CLI, UI, dashboards) for monitoring, guiding, or directly managing the development loop. Orchestrates real-time views of agent activity, backlog, and state, acting as a bridge between human oversight and autonomous agent execution.",
    "public_api": [],
    "depends_on": [
      "cadence.dev.orchestrator"
    ],
    "used_by": [],
    "direct_imports": [
      "cadence",
      "pandas",
      "streamlit"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/dev/command_center.py"
  },
  "cadence/dev/orchestrator.py": {
    "purpose": "Implements the top-level Orchestrator responsible for strictly sequencing all workflow phases (backlog, generation, execution, testing, review, commit, archival). Sole authority for coordinating all roles and enforcing policy, guardrails, and process compliance. Provides the main CLI and API for human or agentic control over project operations.",
    "public_api": [
      "cadence.dev.orchestrator.DevOrchestrator"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "argparse",
      "backlog",
      "executor",
      "generator",
      "record",
      "reviewer",
      "shell",
      "sys",
      "tabulate"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/dev/orchestrator.py"
  },
  "cadence/dev/reviewer.py": {
    "purpose": "Implements the \u201cTaskReviewer\u201d role: given a code diff, performs automated or agent-based review for correctness, completeness, style, and policy adherence. Issues pass/fail outcomes and review rationale, blocking or allowing downstream commit/merge actions. Central for maintaining code quality and enforcing multi-agent approval.",
    "public_api": [
      "cadence.dev.reviewer.PatchReviewError",
      "cadence.dev.reviewer.TaskReviewer"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "json",
      "os",
      "typing"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/dev/reviewer.py"
  },
  "cadence/dev/__init__.py": {
    "purpose": "Declares the Cadence dev subpackage for structured module resolution. Contains no implementation but ensures correct imports for development components.",
    "public_api": [],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/dev/__init__.py"
  },
  "cadence/dev/generator.py": {
    "purpose": "Implements the \u201cTaskGenerator\u201d role: proposes, structures, and validates new microtasks (from LLMs, rules, or human suggestions). Ensures every task entering the backlog is well-formed, actionable, and fully specified, maximizing clarity and minimizing ambiguity for execution agents.",
    "public_api": [
      "cadence.dev.generator.TaskGenerator",
      "cadence.dev.generator.TaskTemplateError"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "datetime",
      "json",
      "os",
      "typing",
      "uuid"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/dev/generator.py"
  },
  "cadence/dev/backlog.py": {
    "purpose": "Implements the \u201cBacklogManager\u201d role: maintains the prioritized queue of microtasks, stories, and epics for development. Handles task selection, addition, removal, and archival, ensuring the entire project workflow is decomposed, visible, and manageable. Acts as the authoritative source for work-in-progress and pending actions.",
    "public_api": [
      "cadence.dev.backlog.BacklogEmptyError",
      "cadence.dev.backlog.BacklogManager",
      "cadence.dev.backlog.TaskNotFoundError",
      "cadence.dev.backlog.TaskStructureError"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "copy",
      "datetime",
      "json",
      "os",
      "tabulate",
      "typing",
      "uuid"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/dev/backlog.py"
  },
  "cadence/agents/base.py": {
    "purpose": "Defines the core Agent interface, encapsulating agent state, communication, and action methods. Provides the abstract base for all agent types (reasoning, execution, efficiency), ensuring consistent lifecycle management and extension points for agent upgrades, LLM swaps, or externalization.",
    "public_api": [
      "cadence.agents.base.BaseAgent"
    ],
    "depends_on": [
      "cadence.llm.client"
    ],
    "used_by": [],
    "direct_imports": [
      "cadence",
      "json",
      "typing"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/agents/base.py"
  },
  "cadence/agents/efficiency.py": {
    "purpose": "Implements the \u201cEfficiencyAgent\u201d type: performs fast, low-cost operations such as linting, static analysis, summarization, and pattern detection. Optimized for cost and latency, this agent supplements deeper reasoning and execution agents by catching common errors or inefficiencies early.",
    "public_api": [
      "cadence.agents.efficiency.EfficiencyAgent"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "base"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/agents/efficiency.py"
  },
  "cadence/agents/reasoning.py": {
    "purpose": "Implements the \u201cReasoningAgent\u201d type: performs high-level planning, architectural review, and policy critique. Handles complex, cross-cutting concerns that require large context windows or deep understanding of the codebase, feeding guidance and constraints into execution agents or task planners.",
    "public_api": [
      "cadence.agents.reasoning.ReasoningAgent"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "base",
      "subprocess",
      "sys",
      "typing"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/agents/reasoning.py"
  },
  "cadence/agents/__init__.py": {
    "purpose": "Declares the Cadence agents subpackage for structured module resolution. Contains no implementation but ensures correct imports for agent components.",
    "public_api": [],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/agents/__init__.py"
  },
  "cadence/agents/registry.py": {
    "purpose": "Maintains the mapping and instantiation logic for agent types (reasoning, efficiency, execution) by name or capability. Allows orchestrator or planners to dynamically assign, swap, or compose agents for each phase or task, supporting modular, agentic orchestration.",
    "public_api": [
      "cadence.agents.registry.get_agent"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "efficiency",
      "execution",
      "reasoning"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/agents/registry.py"
  },
  "cadence/agents/execution.py": {
    "purpose": "Implements the \u201cExecutionAgent\u201d type: tasked with generating large or complex codebase changes, refactorings, or implementations requiring maximal context and autonomy. Interfaces with planners, reviewers, and efficiency agents to ensure diffs are complete, valid, and policy compliant before commit.",
    "public_api": [
      "cadence.agents.execution.ExecutionAgent"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "base"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/agents/execution.py"
  },
  "cadence/llm/client.py": {
    "purpose": "Abstracts and manages all LLM client connections, credentials, and request handling for Cadence agents. Provides unified access to various model endpoints, context window management, and API configuration, allowing agents to query or delegate to LLMs without bespoke integration code.",
    "public_api": [
      "cadence.llm.client.LLMClient",
      "cadence.llm.client.get_default_client",
      "cadence.llm.client.get_env"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "asyncio",
      "dotenv",
      "logging",
      "openai",
      "os",
      "typing"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/llm/client.py"
  },
  "cadence/llm/__init__.py": {
    "purpose": "Declares the Cadence LLM subpackage for structured module resolution. Contains no implementation but ensures correct imports for LLM client components.",
    "public_api": [],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "cadence/llm/__init__.py"
  },
  "examples/test_001/add.py": {
    "purpose": "Simple illustrative example: provides a trivial function (`add`) for use in agentic testing and demo cycles. Serves as a known-correct \u201cgreen\u201d baseline for evaluating the MVP loop and validating that agents can correctly apply and test code patches.",
    "public_api": [
      "examples.test_001.add.add"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "examples/test_001/add.py"
  },
  "examples/test_001/test_add.py": {
    "purpose": "Provides a minimal unit test for `add.py` in the same example set. Used as the canonical failing/green test for agentic development and automated loop validation, establishing the core pattern for all future test-driven agentic tasks.",
    "public_api": [
      "examples.test_001.test_add.test_add_simple"
    ],
    "depends_on": [],
    "used_by": [],
    "direct_imports": [
      "os",
      "sys",
      "utils"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "examples/test_001/test_add.py"
  },
  "examples/test_001/mvp_loop.py": {
    "purpose": "Orchestrates the minimal viable agentic loop (\u201cMVP loop\u201d) in an in-memory, side-effect-free mode. Demonstrates end-to-end agentic task execution: runs tests, triggers agent-based patching, applies diffs, and re-tests until green. The litmus test for Cadence autonomy and correctness.",
    "public_api": [
      "examples.test_001.mvp_loop.OOP_test",
      "examples.test_001.mvp_loop.manual_test"
    ],
    "depends_on": [
      "cadence.dev.executor",
      "cadence.dev.shell"
    ],
    "used_by": [],
    "direct_imports": [
      "cadence",
      "pytest"
    ],
    "related_schemas": [],
    "context_window_expected": "",
    "escalation_review": "",
    "filepath": "examples/test_001/mvp_loop.py"
  }
}